generator client {
  provider = "prisma-client-js"
  output   = "@prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model achievables {
  id              Int                       @id @default(autoincrement())
  achievable_id   Int
  achievable_type String
  achievement_id  Int?
  hidden          Unsupported("tinyint(1)") @default(dbgenerated("'0'"))
  created_at      DateTime?
  updated_at      DateTime?
  deleted_at      DateTime?
  achievements    achievements?             @relation(fields: [achievement_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([achievement_id, achievable_id, achievable_type], map: "achievables_achievement_id_achievable_id_achievable_type_unique")
}

model achievements {
  id          Int           @id @default(autoincrement())
  name        String
  name_short  String?
  description String?
  image_path  String?
  created_at  DateTime?
  updated_at  DateTime?
  deleted_at  DateTime?
  achievables achievables[]

  @@unique([name, name_short, image_path], map: "achievements_name_name_short_image_path_unique")
}

model actionlog {
  id            Int       @id @default(autoincrement())
  user_id       Int
  action_id     Int
  summary       String?
  loggable_id   Int?
  loggable_type String
  created_at    DateTime?
  updated_at    DateTime?
  deleted_at    DateTime?
  actions       actions   @relation(fields: [action_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, loggable_id, loggable_type, created_at, updated_at], map: "actionlog_user_id_loggable_id_loggable_type_created_at_updated_at_unique")
}

model actions {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime?
  updated_at  DateTime?
  deleted_at  DateTime?
  actionlog   actionlog[]
}

model ard_player_ard_team {
  id            Int                       @id @default(autoincrement())
  ard_player_id Int?
  ard_team_id   Int?
  is_active     Unsupported("tinyint(1)") @default(dbgenerated("'1'"))
  created_at    DateTime?
  updated_at    DateTime?
  deleted_at    DateTime?
  ard_teams     ard_teams?                @relation(fields: [ard_team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ard_players   ard_players?              @relation(fields: [ard_player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([ard_team_id, ard_player_id], map: "ard_player_ard_team_ard_team_id_ard_player_id_unique")
}

model ard_players {
  id                  Int                   @unique(map: "ard_players_id_unique")
  name                String
  country_id          Int?
  aoeelo_id           Int?                  @unique(map: "ard_players_aoeelo_id_unique")
  esports_earnings    Int?                  @unique(map: "ard_players_esports_earnings_unique")
  liquipedia_handle   String?               @unique(map: "ard_players_liquipedia_handle_unique")
  discord_id          String?               @unique(map: "ard_players_discord_id_unique")
  created_at          DateTime?
  updated_at          DateTime?
  deleted_at          DateTime?
  ard_player_ard_team ard_player_ard_team[]
  countries           countries?            @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  players             players[]
}

model ard_teams {
  id                  Int                   @unique(map: "ard_teams_id_unique")
  name                String
  created_at          DateTime?
  updated_at          DateTime?
  deleted_at          DateTime?
  ard_player_ard_team ard_player_ard_team[]
  teams               teams[]
}

model atp_categories {
  id           Int           @id @default(autoincrement())
  category     Int
  sub_category String
  base_value   Int?
  modifier     Int           @default(10)
  created_at   DateTime?
  updated_at   DateTime?
  tournaments  tournaments[]

  @@unique([category, sub_category], map: "atp_categories_category_sub_category_unique")
}

model cache {
  key        String @id
  value      String
  expiration Int
}

model cache_locks {
  key        String @id
  owner      String
  expiration Int
}

model cache_most_visited {
  id         Int       @id @default(autoincrement())
  page       String
  entity_id  Int?
  visits     Int
  created_at DateTime?
  updated_at DateTime?
}

model countries {
  id                Int                       @id @default(autoincrement())
  capital           String?
  citizenship       String?
  country_code      String                    @default("")
  currency          String?
  currency_code     String?
  currency_sub_unit String?
  currency_symbol   String?
  currency_decimals Int?
  full_name         String?
  iso_3166_2        String                    @default("")
  iso_3166_3        String                    @default("")
  name              String                    @default("")
  region_code       String                    @default("")
  sub_region_code   String                    @default("")
  eea               Unsupported("tinyint(1)") @default(dbgenerated("'0'"))
  calling_code      String?
  flag              String?
  ard_players       ard_players[]
  players           players[]
  teams             teams[]
  users             users[]

  @@index([id], map: "countries_id_index")
}

model discord_users {
  id         Int       @id @default(autoincrement())
  discord_id String    @unique(map: "discord_users_discord_id_unique")
  nickname   String?
  name       String?
  email      String?   @unique(map: "discord_users_email_unique")
  avatar     String?
  user_id    Int?
  created_at DateTime?
  updated_at DateTime?
  deleted_at DateTime?
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, discord_id], map: "discord_users_user_id_discord_id_unique")
}

model elo_1v1_cache {
  id            Int          @id @default(autoincrement())
  type          String       @default("match")
  elo_before    Int
  elo_after     Int
  match_time    DateTime
  player_id     Int
  tournament_id Int?
  set_id        Int?
  created_at    DateTime?
  updated_at    DateTime?
  sets          sets?        @relation(fields: [set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tournaments   tournaments? @relation(fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  players       players      @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model extern_de_cache {
  id            Int       @id @default(autoincrement())
  relic_link_id String?
  rating        Int
  rank          Int
  created_at    DateTime?
  updated_at    DateTime?
}

model extern_voobly_cache {
  id         Int       @id @default(autoincrement())
  voobly_id  Int
  ladder     Int       @default(1)
  rating     Int
  rank       Int?
  created_at DateTime?
  updated_at DateTime?
}

model extern_voobly_player_cache {
  id         Int       @id @default(autoincrement())
  voobly_id  Int
  rm_1v1     Int
  rm_tg      Int
  created_at DateTime?
  updated_at DateTime?
}

model failed_jobs {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now())
}

model github_users {
  id                   Int       @id @default(autoincrement())
  github_id            String    @unique(map: "github_users_github_id_unique")
  name                 String?
  email                String?
  github_token         String?
  github_refresh_token String?
  user_id              Int?
  created_at           DateTime?
  updated_at           DateTime?
  deleted_at           DateTime?
  users                users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, github_id], map: "github_users_user_id_github_id_unique")
}

model jobs {
  id           Int    @id @default(autoincrement())
  queue        String
  payload      String
  attempts     Int
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model location_location_styles {
  id                Int              @id @default(autoincrement())
  location_id       Int?
  location_style_id Int?
  created_at        DateTime?
  updated_at        DateTime?
  deleted_at        DateTime?
  location_styles   location_styles? @relation(fields: [location_style_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  locations         locations?       @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([location_id, location_style_id], map: "location_location_styles_location_id_location_style_id_unique")
}

model location_set_info {
  id          Int        @id @default(autoincrement())
  set_info_id Int?
  location_id Int?
  created_at  DateTime?
  updated_at  DateTime?
  deleted_at  DateTime?
  locations   locations? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  set_info    set_info?  @relation(fields: [set_info_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model location_styles {
  id                       Int                        @id @default(autoincrement())
  style                    String
  weight                   Int?                       @default(10)
  created_at               DateTime?
  updated_at               DateTime?
  deleted_at               DateTime?
  location_location_styles location_location_styles[]
}

model locations {
  id                       Int                        @id @default(autoincrement())
  name                     String
  name_short               String?
  liquipedia_link          String?
  aoe2map_link             String?
  aoe2map_uuid             String?
  image_path               String?
  preview_image_path       String?
  keywords                 String?
  created_at               DateTime?
  updated_at               DateTime?
  deleted_at               DateTime?
  location_location_styles location_location_styles[]
  location_set_info        location_set_info[]

  @@unique([name, name_short, image_path, preview_image_path], map: "locations_name_name_short_image_path_preview_image_path_unique")
}

model meta_cache {
  id          Int    @id @default(autoincrement())
  name        Int
  value_int   Int
  value_float Float
  value_str   String
}

model metadata {
  id               Int                        @id @default(autoincrement())
  key              String
  sub_key          String?
  type_of_value    String
  boolean_value    Unsupported("tinyint(1)")?
  integer_value    Int?
  smallint_value   Int?
  datetime_value   DateTime?
  str50_value      String?
  str100_value     String?
  str255_value     String?
  text_value       String?
  json_value       String?
  metadatable_id   Int
  metadatable_type String
  is_verified      Unsupported("tinyint(1)")  @default(dbgenerated("'0'"))
  created_at       DateTime?
  updated_at       DateTime?
  deleted_at       DateTime?

  @@unique([metadatable_id, metadatable_type, key, sub_key, type_of_value], map: "metadata_metadatable_id_metadatable_type_key_sub_key_type_of_value_unique")
}

model migrationlog {
  id             Int                        @id @default(autoincrement())
  migratory_id   Int
  migratory_type String
  save_confirmed Unsupported("tinyint(1)")? @default(dbgenerated("'0'"))
  created_at     DateTime?
  updated_at     DateTime?
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String
  batch     Int
}

model model_has_permissions {
  permission_id Int
  model_type    String
  model_id      Int
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    Int
  model_type String
  model_id   Int
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model news {
  id          Int                       @id @default(autoincrement())
  title       String
  pinned      Unsupported("tinyint(1)") @default(dbgenerated("'0'"))
  abstract    String?
  content     String
  description String?
  tags        String?
  created_at  DateTime?
  updated_at  DateTime?
  deleted_at  DateTime?
}

model password_reset_tokens {
  email      String    @id
  token      String
  created_at DateTime?
}

model permissions {
  id                    Int                     @id @default(autoincrement())
  name                  String
  guard_name            String
  created_at            DateTime?
  updated_at            DateTime?
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]

  @@unique([name, guard_name], map: "permissions_name_guard_name_unique")
}

model personal_access_tokens {
  id             Int       @id @default(autoincrement())
  tokenable_type String
  tokenable_id   Int
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique")
  abilities      String?
  last_used_at   DateTime?
  expires_at     DateTime?
  created_at     DateTime?
  updated_at     DateTime?

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model player_team {
  id         Int                        @id @default(autoincrement())
  joined_at  DateTime?
  left_at    DateTime?
  is_active  Unsupported("tinyint(1)")? @default(dbgenerated("'1'"))
  player_id  Int
  team_id    Int
  created_at DateTime?
  updated_at DateTime?
  deleted_at DateTime?
  teams      teams                      @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  players    players                    @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([player_id, team_id, joined_at, left_at], map: "player_team_player_id_team_id_joined_at_left_at_unique")
}

model players {
  id                           Int             @id @default(autoincrement())
  name                         String
  current_elo                  Int?
  base_elo                     Int             @default(1800)
  current_atp                  Int?
  base_atp                     Int             @default(1800)
  voobly_id_main               String?         @unique(map: "players_voobly_id_main_unique")
  relic_link_id_main           String?         @unique(map: "players_relic_link_id_main_unique")
  steam_id_main                String?         @unique(map: "players_steam_id_main_unique")
  liquipedia_handle            String?         @unique(map: "players_liquipedia_handle_unique")
  discord_handle               String?         @unique(map: "players_discord_handle_unique")
  twitch_handle                String?         @unique(map: "players_twitch_handle_unique")
  aoe_reference_data_player_id Int?
  country_id                   Int?
  user_id                      Int?
  created_at                   DateTime?
  updated_at                   DateTime?
  deleted_at                   DateTime?
  elo_1v1_cache                elo_1v1_cache[]
  player_team                  player_team[]
  users                        users?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  countries                    countries?      @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ard_players                  ard_players?    @relation(fields: [aoe_reference_data_player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([name, user_id, country_id, relic_link_id_main, steam_id_main], map: "players_name_user_id_country_id_relic_link_id_main_steam_id_main_unique")
}

model rating_checkpoints {
  id                 Int       @id @default(autoincrement())
  participant_id     Int
  participant_type   String
  rating             Int       @default(0)
  valid_period_start DateTime
  valid_period_end   DateTime
  created_at         DateTime?
  updated_at         DateTime?
  deleted_at         DateTime?

  @@unique([participant_id, participant_type, valid_period_start, valid_period_end], map: "rating_checkpoints_participant_id_participant_type_valid_period_start_valid_period_end_unique")
}

model rating_deltas {
  id               Int       @id @default(autoincrement())
  participant_id   Int
  participant_type String
  set_id           Int
  rating_delta     Int       @default(0)
  date_delta       DateTime
  created_at       DateTime?
  updated_at       DateTime?
  deleted_at       DateTime?
  sets             sets      @relation(fields: [set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([participant_id, participant_type, set_id], map: "rating_deltas_participant_id_participant_type_set_id_unique")
}

model reviews {
  id              Int       @id @default(autoincrement())
  changes         String
  status          String?   @default("open")
  reviewable_id   Int
  reviewable_type String
  created_at      DateTime?
  updated_at      DateTime?
  deleted_at      DateTime?
}

model role_has_permissions {
  permission_id Int
  role_id       Int
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([permission_id, role_id])
}

model roles {
  id                   Int                    @id @default(autoincrement())
  name                 String
  guard_name           String
  created_at           DateTime?
  updated_at           DateTime?
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]

  @@unique([name, guard_name], map: "roles_name_guard_name_unique")
}

model sessions {
  id            String  @id
  user_id       Int?
  ip_address    String?
  user_agent    String?
  payload       String
  last_activity Int
  users         users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([last_activity], map: "sessions_last_activity_index")
}

model set_info {
  id                 Int                       @id @default(autoincrement())
  score              Int
  is_winner          Unsupported("tinyint(1)") @default(dbgenerated("'0'"))
  adjusted_score     Int
  participatory_id   Int
  participatory_type String
  set_id             Int
  created_at         DateTime?
  updated_at         DateTime?
  deleted_at         DateTime?
  location_set_info  location_set_info[]
  sets               sets                      @relation(fields: [set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([set_id, participatory_id, participatory_type], map: "set_info_set_id_participatory_id_participatory_type_unique")
}

model sets {
  id                     Int                       @id @default(autoincrement())
  is_tie                 Unsupported("tinyint(1)") @default(dbgenerated("'0'"))
  has_admin_win          Unsupported("tinyint(1)") @default(dbgenerated("'0'"))
  played_at              DateTime?
  use_played_at_dummy    Unsupported("tinyint(1)") @default(dbgenerated("'0'"))
  best_of                Int?
  aoe2cm2_civ_draft_link String?                   @unique(map: "sets_aoe2cm2_civ_draft_link_unique")
  aoe2cm2_map_draft_link String?                   @unique(map: "sets_aoe2cm2_map_draft_link_unique")
  stageable_id           Int?
  created_at             DateTime?
  updated_at             DateTime?
  deleted_at             DateTime?
  elo_1v1_cache          elo_1v1_cache[]
  rating_deltas          rating_deltas[]
  set_info               set_info[]
  stageables             stageables?               @relation(fields: [stageable_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stage_tournament_templates {
  id          Int       @id @default(autoincrement())
  name        String
  short_name  String
  description String?
  created_at  DateTime?
  updated_at  DateTime?
  deleted_at  DateTime?

  @@unique([name, short_name], map: "stage_tournament_templates_name_short_name_unique")
}

model stageables {
  id             Int       @id @default(autoincrement())
  stage_order    Int?
  stageable_id   Int
  stageable_type String
  stage_id       Int
  created_at     DateTime?
  updated_at     DateTime?
  deleted_at     DateTime?
  sets           sets[]
  stages         stages    @relation(fields: [stage_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([stage_id, stageable_id, stageable_type], map: "stageables_stage_id_stageable_id_stageable_type_unique")
}

model stages {
  id            Int          @id @default(autoincrement())
  name          String
  bracket       Int          @default(1)
  default_order Int          @default(1)
  weight        Int          @default(10)
  importance    Int          @default(1)
  created_at    DateTime?
  updated_at    DateTime?
  deleted_at    DateTime?
  stageables    stageables[]

  @@unique([name, bracket, default_order, weight, importance], map: "stages_name_bracket_default_order_weight_importance_unique")
}

model steam_users {
  id         Int       @id @default(autoincrement())
  steam_id   String    @unique(map: "steam_users_steam_id_unique")
  nickname   String?
  name       String?
  avatar     String?
  user_id    Int?
  created_at DateTime?
  updated_at DateTime?
  deleted_at DateTime?
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, steam_id], map: "steam_users_user_id_steam_id_unique")
}

model teams {
  id                         Int           @id @default(autoincrement())
  name                       String
  tag                        String
  current_elo                Int?
  base_elo                   Int           @default(1800)
  current_atp                Int?
  base_atp                   Int           @default(1800)
  primary_color              String?
  secondary_color            String?
  aoe_reference_data_team_id Int?
  country_id                 Int?
  created_at                 DateTime?
  updated_at                 DateTime?
  deleted_at                 DateTime?
  player_team                player_team[]
  countries                  countries?    @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ard_teams                  ard_teams?    @relation(fields: [aoe_reference_data_team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([name, tag], map: "teams_name_tag_unique")
}

model telemetry {
  id         Int       @id @default(autoincrement())
  created_at DateTime?
  updated_at DateTime?
}

model tournament_results {
  id                 Int         @id @default(autoincrement())
  type               Int?
  prize_amount       Int?
  prize_currency     Int         @default(1)
  source             String?
  participatory_id   Int
  participatory_type String
  tournament_id      Int
  created_at         DateTime?
  updated_at         DateTime?
  deleted_at         DateTime?
  tournaments        tournaments @relation(fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tournaments {
  id                 Int                  @id @default(autoincrement())
  name               String
  short_name         String
  started_at         DateTime?
  ended_at           DateTime?
  weight             Int                  @default(1)
  game_mode          Int                  @default(1)
  format_type        Int                  @default(1)
  event_type         Int                  @default(1)
  prize_pool         Int?
  prize_currency     Int                  @default(1)
  structure          Int                  @default(1)
  evaluation         String?
  website_link       String?
  liquipedia_link    String?
  atp_category_id    Int?
  created_at         DateTime?
  updated_at         DateTime?
  deleted_at         DateTime?
  elo_1v1_cache      elo_1v1_cache[]
  tournament_results tournament_results[]
  atp_categories     atp_categories?      @relation(fields: [atp_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([name, atp_category_id, liquipedia_link, short_name], map: "tournaments_name_atp_category_id_liquipedia_link_short_name_unique")
}

model twitch_users {
  id         Int       @id @default(autoincrement())
  twitch_id  String    @unique(map: "twitch_users_twitch_id_unique")
  nickname   String?
  name       String?
  email      String?
  avatar     String?
  user_id    Int?
  created_at DateTime?
  updated_at DateTime?
  deleted_at DateTime?
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, twitch_id], map: "twitch_users_user_id_twitch_id_unique")
}

model users {
  id             Int             @id @default(autoincrement())
  name           String
  email          String?         @unique(map: "users_email_unique")
  country_id     Int?
  remember_token String?
  created_at     DateTime?
  updated_at     DateTime?
  deleted_at     DateTime?
  actionlog      actionlog[]
  discord_users  discord_users[]
  github_users   github_users[]
  players        players[]
  sessions       sessions[]
  steam_users    steam_users[]
  twitch_users   twitch_users[]
  countries      countries?      @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
