generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CacheMostVisited {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  day       DateTime @db.Date
  page      String   @db.Text
  entity_id Int?     @db.UnsignedInt
  visits    Int      @db.UnsignedInt

  @@map("cache_most_visited")
}

model Country {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  iso_key          String       @unique @db.VarChar(10)
  name             String       @db.Text
  ipInformation    PageIpInfo[]
  playersOfCountry Player[]

  @@map("country")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Elo1V1Cache {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  created       DateTime @db.DateTime(0)
  type          String   @default("match") @db.VarChar(255)
  match_id      Int?     @db.UnsignedInt
  player_id     Int      @db.UnsignedInt
  elo_before    Int      @db.UnsignedInt
  elo_after     Int      @db.UnsignedInt
  match_time    DateTime @db.Date // redundant
  tournament_id Int?     @db.UnsignedInt // redundant

  cachedMatch      Match?      @relation(fields: [match_id], references: [id])
  cachedPlayer     Player?     @relation(fields: [player_id], references: [id])
  cachedTournament Tournament? @relation(fields: [tournament_id], references: [id])

  @@index([match_id], map: "match_id")
  @@index([match_time], map: "match_time")
  @@index([player_id], map: "player_id")
  @@index([tournament_id], map: "tournament_id")
  @@map("elo_1v1_cache")
}

model ExternDeCache {
  id       Int      @id @default(autoincrement()) @db.UnsignedInt
  steam_id String   @db.VarChar(40)
  time     DateTime @db.DateTime(0)
  rating   Int      @db.UnsignedInt
  rank     Int      @db.UnsignedInt

  cachedPlayer Player? @relation(fields: [steam_id], references: [steam_id_failed])

  @@map("extern_de_cache")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ExternVooblyCache {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  voobly_id Int      @db.UnsignedInt
  ladder    Int      @default(1) @db.UnsignedInt // 1: rm 1v1
  rating    Int      @db.UnsignedInt
  ranking   Int?     @db.UnsignedInt
  time      DateTime @db.DateTime(0)

  cachedPlayer Player? @relation(fields: [voobly_id], references: [voobly_id])

  @@index([voobly_id], map: "voobly_id")
  @@map("extern_voobly_cache")
}

model ExternVooblyPlayerCache {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  voobly_id Int      @db.UnsignedInt
  rm_1v1    Int      @db.UnsignedInt
  rm_tg     Int      @db.UnsignedInt
  time      DateTime @db.DateTime(0)

  cachedPlayer Player? @relation(fields: [voobly_id], references: [voobly_id])

  @@index([voobly_id], map: "voobly_id")
  @@map("extern_voobly_player_cache")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Match {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  date          DateTime? @db.Date // when this match was played (null=auto from tournament)
  tournament_id Int?      @db.UnsignedInt
  stage_id      Int       @default(1) @db.UnsignedInt
  player_1_id   Int       @db.UnsignedInt
  player_2_id   Int       @db.UnsignedInt
  score_1       Int       @db.UnsignedInt
  score_2       Int       @db.UnsignedInt
  create_user   Int       @db.UnsignedInt
  create_time   DateTime  @db.DateTime(0)
  update_user   Int       @db.UnsignedInt
  update_time   DateTime  @db.DateTime(0)

  playedInTournament   Tournament?   @relation(fields: [tournament_id], references: [id])
  playedAtStage        Stage         @relation(fields: [stage_id], references: [id])
  participatingPlayer1 Player        @relation("p1", fields: [player_1_id], references: [id])
  participatingPlayer2 Player        @relation("p2", fields: [player_2_id], references: [id])
  createdByUser        User?         @relation("create", fields: [create_user], references: [id])
  updatedByUser        User?         @relation("update", fields: [update_user], references: [id])
  cachedEloItems       Elo1V1Cache[]
  cachedPlayerItems    PlayerCache[]

  @@index([create_user], map: "created_user")
  @@index([date, tournament_id, player_1_id, player_2_id], map: "date")
  @@index([stage_id], map: "stage_id")
  @@index([update_user], map: "update_user")
  @@map("match_1v1")
}

model match_1v1_event {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  date          DateTime? @db.Date
  time          DateTime? @db.Time(0)
  tournament_id Int       @db.UnsignedInt
  stage_id      Int       @db.UnsignedInt
  player_1_id   Int?      @db.UnsignedInt
  player_2_id   Int?      @db.UnsignedInt
  bo            Int?      @db.UnsignedInt
  create_user   Int       @db.UnsignedInt
  create_time   DateTime  @db.DateTime(0)
  update_user   Int       @db.UnsignedInt
  update_time   DateTime  @db.DateTime(0)

  @@index([create_user], map: "create_user")
  @@index([stage_id], map: "stage_id")
  @@index([player_1_id, player_2_id], map: "tournament_id")
  @@index([tournament_id], map: "tournament_id_2")
  @@index([update_user], map: "update_user")
  @@ignore
}

model MetaCache {
  id          Int    @id @default(autoincrement()) @db.UnsignedInt
  name        Int    @unique(map: "name")
  value_int   Int
  value_float Float
  value_str   String @db.Text

  @@map("meta_cache")
}

model PageIpInfo {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  time         DateTime @db.DateTime(0)
  ip           BigInt?
  data         String?  @db.Text
  longitude    Float?
  latitude     Float?
  country_name String?  @map("country") @db.VarChar(100)
  country_code String?  @db.VarChar(10)
  city         String?  @db.Text
  error        String?  @db.Text

  countryInfo Country? @relation(fields: [country_code], references: [iso_key])

  @@map("page_ip_info")
}

model PageVisit {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  time        DateTime @db.DateTime(0)
  session_key String?  @db.VarChar(255)
  hash        String?  @db.VarChar(100)
  user        Int?     @db.UnsignedInt
  ip          BigInt?
  ip_info     Int?     @db.UnsignedInt
  domain      String?  @db.VarChar(100)
  path        String?  @db.Text
  page        String?  @db.VarChar(255)
  entity_id   Int?     @db.UnsignedInt

  userInfo User? @relation(fields: [user], references: [id])

  @@index([ip_info], map: "ip_info")
  @@index([page, entity_id], map: "page")
  @@index([session_key], map: "session_key")
  @@index([user], map: "user")
  @@map("page_visit")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Player {
  id                          Int                       @id @default(autoincrement()) @db.UnsignedInt
  name                        String                    @unique(map: "name") @db.VarChar(100)
  alias                       String                    @db.VarChar(255) // comma-separated
  team_id                     Int?                      @db.UnsignedInt
  country_key                 String?                   @db.VarChar(10)
  initial_elo_1v1             Int?                      @db.UnsignedInt
  voobly_id                   Int?                      @unique @db.UnsignedInt
  steam_id                    String?                   @db.VarChar(40)
  steam_id_failed             String?                   @unique @db.VarChar(40)
  twitch                      String?                   @db.Text
  youtube                     String?                   @db.Text
  twitter                     String?                   @db.Text
  facebook                    String?                   @db.Text
  create_user                 Int                       @db.UnsignedInt
  create_time                 DateTime                  @db.DateTime(0)
  update_user                 Int                       @db.UnsignedInt
  update_time                 DateTime                  @db.DateTime(0)
  externVooblyPlayerCache     ExternVooblyPlayerCache[]
  externVooblyCache           ExternVooblyCache[]
  participatingPlayer1Matches Match[]                   @relation("p1")
  participatingPlayer2Matches Match[]                   @relation("p2")
  externDeCache               ExternDeCache[]
  elo1V1Cache                 Elo1V1Cache[]
  memberOfTeam                Team?                     @relation(fields: [team_id], references: [id])
  fromCountry                 Country?                  @relation(fields: [country_key], references: [iso_key])
  createdByUser               User?                     @relation("create", fields: [create_user], references: [id])
  updatedByUser               User?                     @relation("update", fields: [update_user], references: [id])
  cachedPlayerItem            PlayerCache?
  tournamentResultItem        TournamentResult[]

  @@index([create_user], map: "create_user")
  @@index([team_id], map: "team_id")
  @@index([update_user], map: "update_user")
  @@map("player")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model player_bak {
  id              Int      @id @default(autoincrement()) @db.UnsignedInt
  name            String   @unique(map: "name") @db.VarChar(30)
  alias           String   @db.VarChar(255) // comma-separated
  team_id         Int?     @db.UnsignedInt
  country_key     String?  @db.VarChar(10)
  initial_elo_1v1 Int?     @db.UnsignedInt
  voobly_id       Int?     @db.UnsignedInt
  steam_id        String?  @db.VarChar(40)
  steam_id_failed String?  @db.VarChar(40)
  twitch          String?  @db.Text
  youtube         String?  @db.Text
  twitter         String?  @db.Text
  facebook        String?  @db.Text
  create_user     Int      @db.UnsignedInt
  create_time     DateTime @db.DateTime(0)
  update_user     Int      @db.UnsignedInt
  update_time     DateTime @db.DateTime(0)

  @@index([create_user], map: "create_user")
  @@index([team_id], map: "team_id")
  @@index([update_user], map: "update_user")
  @@ignore
}

model PlayerCache {
  id              Int       @id @default(autoincrement()) @db.UnsignedInt
  player_id       Int       @unique(map: "player_id") @db.UnsignedInt
  num_matches     Int?      @db.UnsignedInt
  num_wins        Int?      @db.UnsignedInt
  num_games       Int?      @db.UnsignedInt
  tournament_ids  String?   @db.Text
  last_match      Int?      @db.UnsignedInt
  last_match_time DateTime? @db.DateTime(0)
  rank            Int?      @db.UnsignedInt
  elo             Int?      @db.UnsignedInt
  elo_update      DateTime? @db.DateTime(0)
  elo_peak        Int?      @db.UnsignedInt
  de_elo          Int?      @db.UnsignedInt
  de_rank         Int?      @db.UnsignedInt
  de_update       DateTime? @db.DateTime(0)
  voobly_elo      Int?      @db.UnsignedInt
  voobly_rank     Int?      @db.UnsignedInt
  voobly_update   DateTime? @db.DateTime(0)

  cachedPlayer  Player? @relation(fields: [player_id], references: [id])
  lastMatchItem Match?  @relation(fields: [last_match], references: [id])

  @@map("player_cache")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_info {
  id          Int      @db.UnsignedInt
  player      Int      @db.UnsignedInt
  type        String   @db.VarChar(255)
  value_int   Int?
  value_str   String?  @db.Text
  create_time DateTime @db.DateTime(0)
  create_user Int      @db.UnsignedInt

  @@ignore
}

model Stage {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  name          String  @db.Text
  bracket       Int     @default(1) @db.UnsignedInt
  index         Int     @default(1) @db.UnsignedInt
  weight        Float   @default(1) @db.Float
  importance    Int     @default(1) @db.UnsignedInt
  playedMatches Match[]

  @@map("stage")
}

model Subscription {
  id      Int      @id @default(autoincrement()) @db.UnsignedInt
  created DateTime @db.DateTime(0)
  email   String   @db.Text
  session String   @db.Text

  @@map("subscription")
}

model Team {
  id              Int       @id @default(autoincrement()) @db.UnsignedInt
  name            String    @unique(map: "name") @db.VarChar(100)
  tag             String    @db.VarChar(30)
  primary_color   String?   @db.VarChar(30)
  secondary_color String?   @db.VarChar(30)
  create_user     Int?      @db.UnsignedInt
  create_time     DateTime? @db.DateTime(0)
  update_user     Int?      @db.UnsignedInt
  update_time     DateTime? @db.DateTime(0)
  playersInTeam   Player[]
  createdByUser   User?     @relation("create", fields: [create_user], references: [id])
  updatedByUser   User?     @relation("update", fields: [update_user], references: [id])

  @@index([create_user], map: "create_user")
  @@index([update_user], map: "update_user")
  @@map("team")
}

model Ticket {
  id      Int      @id @default(autoincrement()) @db.UnsignedInt
  created DateTime @db.DateTime(0)
  user    Int?     @db.UnsignedInt
  type    String   @db.VarChar(255)
  done    Int      @default(0)
  message String   @db.Text
  contact String   @db.Text
  hash    String   @db.Text
  session String   @db.Text

  userInfo User? @relation(fields: [user], references: [id])

  @@index([user], map: "user")
  @@map("ticket")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Tournament {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  name                 String                 @db.VarChar(255)
  short                String                 @db.VarChar(100)
  start                DateTime?              @db.Date
  end                  DateTime?              @db.Date
  weight               Int                    @default(1) @db.UnsignedInt
  type                 tournament_type        @default(cup)
  prizemoney           Int?                   @db.UnsignedInt // $
  parent_id            Int?                   @db.UnsignedInt
  structure            tournament_structure
  evaluation           String?                @db.VarChar(30)
  website              String?                @db.Text
  comment              String?                @db.Text
  create_user          Int                    @db.UnsignedInt
  create_time          DateTime               @db.DateTime(0)
  update_user          Int                    @db.UnsignedInt
  update_time          DateTime               @db.DateTime(0)
  elo1V1CacheItem      Elo1V1Cache[]
  matchesInTournament  Match[]
  tournamentInfoBackup TournamentInfoBackup[]
  tournamentInfo       TournamentInfo[]
  tournamentResults    TournamentResult[]
  createdByUser        User?                  @relation("create", fields: [create_user], references: [id])
  updatedByUser        User?                  @relation("update", fields: [update_user], references: [id])
  parentTournament     Tournament?            @relation("family", fields: [parent_id], references: [id])
  childTournaments     Tournament[]           @relation("family")

  @@index([create_user], map: "create_user")
  @@index([parent_id], map: "parent_id")
  @@index([update_user], map: "update_user")
  @@map("tournament")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model TournamentInfo {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  create_user   Int      @db.UnsignedInt
  create_time   DateTime @db.DateTime(0)
  tournament_id Int      @db.UnsignedInt
  type          Int      @db.UnsignedInt // 1: challonge bracket, 2: bracket URL, 3: public res., 4: private res.
  description   String   @db.Text
  value         String   @db.Text

  aboutTournament Tournament? @relation(fields: [tournament_id], references: [id])
  createdByUser   User?       @relation("create", fields: [create_user], references: [id])

  @@index([create_user], map: "create_user")
  @@index([type], map: "type")
  @@map("tournament_info")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model TournamentInfoBackup {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  create_user   Int      @db.UnsignedInt
  create_time   DateTime @db.DateTime(0)
  tournament_id Int      @db.UnsignedInt
  type          Int      @db.UnsignedInt // 1: challonge bracket, 2: bracket URL, 3: public res., 4: private res.
  description   String   @db.Text
  value         String   @db.Text

  aboutTournament Tournament? @relation(fields: [tournament_id], references: [id])
  createdByUser   User?       @relation("create", fields: [create_user], references: [id])

  @@index([create_user], map: "create_user")
  @@index([type], map: "type")
  @@map("tournament_info_bak")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model TournamentResult {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  tournament_id Int      @map("tournament") @db.UnsignedInt
  player_id     Int      @map("player") @db.UnsignedInt
  type          Int?     @db.UnsignedInt // 1: win, ..., 5: semi-finals, null: other
  money         Int?     @db.UnsignedInt
  source        String?  @db.Text
  create_time   DateTime @db.DateTime(0)
  create_user   Int      @db.UnsignedInt

  playedInTournament Tournament? @relation(fields: [tournament_id], references: [id])
  createdByUser      User?       @relation("create", fields: [create_user], references: [id])
  resultForPlayer    Player?     @relation(fields: [player_id], references: [id])

  @@index([create_user], map: "create_user")
  @@index([player_id], map: "player")
  @@index([tournament_id], map: "tournament")
  @@map("tournament_result")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model User {
  id                           Int                    @id @default(autoincrement()) @db.UnsignedInt
  name                         String                 @db.VarChar(100)
  pass                         String                 @db.VarChar(255)
  rank                         Int                    @default(1) @db.UnsignedInt // 1: admin, 2: normal
  allow_tournament             Int?                   @default(0) @db.UnsignedInt // 0: nothing, 1: create, 2: and update, 3: and remove
  allow_player                 Int?                   @default(0) @db.UnsignedInt // 0: nothing, 1: create, 2: and update, 3: and remove
  allow_match                  Int?                   @default(0) // 0: nothing, 1: create, 2: and update, 3: and remove
  allow_see                    Int?                   @default(0) @db.UnsignedInt // 0: nothing, 1: create, 2: and update, 3: and remove
  createdMatches               Match[]                @relation("create")
  updatedMatches               Match[]                @relation("update")
  createdPlayers               Player[]               @relation("create")
  updatedPlayers               Player[]               @relation("update")
  createdTeams                 Team[]                 @relation("create")
  updatedTeams                 Team[]                 @relation("update")
  createdTournamentInfoBackups TournamentInfoBackup[] @relation("create")
  createdTournamentResults     TournamentResult[]     @relation("create")
  createdTournamentInfo        TournamentInfo[]       @relation("create")
  createdTournaments           Tournament[]           @relation("create")
  updatedTournaments           Tournament[]           @relation("update")
  createdTickets               Ticket[]
  visitedPages                 PageVisit[]

  @@map("user")
}

enum tournament_type {
  cup
  qualifier
}

enum tournament_structure {
  single_elemination @map("single-elemination")
  double_elimination @map("double-elimination")
  league
  other
  group
  group_ko           @map("group-ko")
}
